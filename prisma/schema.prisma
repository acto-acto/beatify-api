// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Track {
  id                     String               @id
  name                   String
  duration               Int
  audio                  String?
  image                  String?
  releaseDate            String?
  artistId               String
  artist                 Artist              @relation(fields: [artistId], references: [id])
  albumId                String?
  album                  Album?               @relation(fields: [albumId], references: [id])
  favouritedBy           FavouriteTrack[]
  playlists              PlaylistTrack[]
  createdAt              DateTime             @default(now())
  updatedAt              DateTime?            @updatedAt
}

model Playlist {
  id                     String               @id @default(uuid())
  name                   String
  cover                  String?
  tracks                 PlaylistTrack[]
  createdAt              DateTime             @default(now())
  updatedAt              DateTime?            @updatedAt
}

model Album {
  id                     String               @id @default(uuid())
  name                   String
  cover                  String?
  artistId               String
  artist                 Artist               @relation(fields: [artistId], references: [id])
  tracks                 Track[]
  releaseDate            String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime?            @updatedAt
}

model Artist {
  id                     String               @id @default(uuid())
  name                   String               @unique
  followers              UserFollowArtist[]
  tracks                 Track[]
  albums                 Album[]
  createdAt              DateTime             @default(now())
  updatedAt              DateTime?            @updatedAt
}

model User {
  id                     String               @id @default(uuid())
  email                  String               @unique
  password               String
  refreshToken           String?              @unique
  resetToken             String?              @unique
  resetOtp               String?              @unique
  resetOtpExpiry         DateTime?
  profile                Profile?
  favouriteTracks        FavouriteTrack[]
  following              UserFollowArtist[]
  createdAt              DateTime             @default(now())
  updatedAt              DateTime?            @updatedAt
}

model Profile {
  id                     String               @id @default(uuid())
  userName               String               @unique
  fullName               String
  avatarUrl              String?              @unique
  lastPlayerState        Json?
  user                   User                 @relation(fields: [userId], references: [id])
  userId                 String               @unique
  createdAt              DateTime             @default(now())
  updatedAt              DateTime?            @updatedAt
}





model PlaylistTrack {
  playlist               Playlist             @relation(fields: [playlistId], references: [id])
  playlistId             String
  track                  Track                @relation(fields: [trackId], references: [id])
  trackId                String
  createdAt              DateTime             @default(now())
  @@id([playlistId, trackId])
} 

model FavouriteTrack {
  user                   User                 @relation(fields: [userId], references: [id])
  userId                 String
  track                  Track                @relation(fields: [trackId], references: [id])
  trackId                String
  createdAt              DateTime             @default(now())
  @@id([userId, trackId])
}

model UserFollowArtist {
  user                   User                 @relation(fields: [userId], references: [id])
  userId                 String
  artist                 Artist               @relation(fields: [artistId], references: [id])
  artistId               String
  createdAt              DateTime             @default(now())
  @@id([userId, artistId])
}